#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33 34 35
#define DEF 0
#define LWR 1
#define RSE 2
#define FUNCTION 3
#define GAME 4
#define RESET 5

&mt { flavor = "tap-preferred"; };

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <2000>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <2000>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        hml_s: hml_s {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <2000>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        hmr_s: hmr_s {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <2000>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        timeout-ms = <20>;
        require-prior-idle-ms = <250>;

        combo_reset_layer_left {
            key-positions = <20 24>;
            bindings = <&to 4>;
        };

        combo_reset_layer_right {
            key-positions = <25 29>;
            bindings = <&to 4>;
        };

        combo_unlock {
            key-positions = <0 4>;
            bindings = <&studio_unlock>;
        };
    };

    macros {
        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp EQUAL &kp GT>;
            label = "ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp Q                &kp W              &kp E            &kp R      &kp T  &kp Y  &kp U           &kp I             &kp O               &kp P
&hml LEFT_CONTROL A  &hml LEFT_SHIFT S  &hml LEFT_ALT D  &kp F      &kp G  &kp H  &kp J           &hmr RIGHT_ALT K  &hmr RIGHT_SHIFT L  &hmr RIGHT_CONTROL SEMICOLON
&kp Z                &kp X              &kp C            &kp V      &kp B  &kp N  &kp M           &kp COMMA         &kp DOT             &kp FSLH
                                        &kp LC(SPACE)    &kp SPACE  &mo 2  &sl 1  &kp LEFT_SHIFT  &mo 3
            >;
        };

        symbol_layer {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH       &kp DOLLAR    &kp PERCENT  &kp CARET     &kp QUESTION  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3   &kp NUMBER_4  &kp N5       &kp NUMBER_6  &kp N7        &kp N8        &kp N9                &kp N0
&kp BACKSLASH    &kp PIPE      &kp SEMICOLON  &kp UNDER     &kp MINUS    &kp PLUS      &kp EQUAL     &arrow        &kp LEFT_BRACE        &kp RIGHT_BRACE
                               &none          &none         &none        &none         &none         &none
            >;
        };

        nav_layer {
            bindings = <
&kp LA(TAB)             &kp LC(TAB)        &kp LS(LG(N5))    &kp PAGE_DOWN    &kp ESCAPE  &kp ESCAPE  &kp HOME   &kp END       &kp BACKSPACE  &kp DEL
&kp LEFT_GUI            &kp LEFT_ALT       &kp LEFT_CONTROL  &kp LEFT_SHIFT   &kp ENTER   &kp LEFT    &kp DOWN   &kp UP_ARROW  &kp RIGHT      &kp SQT
&kp LC(LS(LEFT_ARROW))  &kp LC(LS(RIGHT))  &none             &kp PRINTSCREEN  &kp TAB     &kp TAB     &kp ENTER  &none         &none          &none
                                           &none             &none            &trans      &none       &trans     &trans
            >;
        };

        alt {
            bindings = <
&none   &none   &none   &none   &none    &none    &none   &none   &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5   &kp F6   &kp F7  &kp F8  &kp F9            &kp SQT
&none   &none   &none   &none   &kp F11  &kp F12  &none   &none   &none             &none
                &none   &none   &none    &none    &none   &none
            >;
        };

        Reset {
            bindings = <
&none         &none         &none         &none         &none         &none         &none         &none         &none         &none
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&out OUT_TOG  &none         &none         &none         &none         &none         &none         &none         &none         &out OUT_TOG
                            &none         &none         &bootloader   &bootloader   &none         &none
            >;
        };
    };
};
